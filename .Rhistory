getwd()
load("/Volumes/BMO/Ducks/geostat/210823_geostat_mod.RData")
library(usethis)
usethis::edit_r_environ()
load("/Volumes/BMO/to laptop/areal_model/femMall_ns_120824.RData")
library(beepr)
library(prioritizr)
library(rstan)
library(sf)
post <- rstan::extract(m)
#~~~~~~~~~~~~~~~~~~~
# Convergence
#~~~~~~~~~~~~~~~~~~~
conv <- summary(m)$summary[,"Rhat"]
summary(conv)
hist(conv)
which(conv > 1.1)
summary(conv)
#~~~~~~~~~~~~~~~~~~~
# Reporting rate
#~~~~~~~~~~~~~~~~~~~
plot(colMeans(post$r), pch=16, ylim=c(0,1))
#~~~~~~~~~~~~~~~~~~~
# Sigmas
#~~~~~~~~~~~~~~~~~~~
#~~~~
# Kappa
#~~~~
plot(post$sigma_k_ad, type='l')
plot(post$sigma_k_j, type='l')
plot(post$sigma_p_ad, type='l')
#~~~~~~~~~~~~~~~~~~~
# Betas
#~~~~~~~~~~~~~~~~~~~
hist(post$beta_p_ad)
#~~~~~~~~~~~~~~~~~~~
# Betas
#~~~~~~~~~~~~~~~~~~~
dim(post$beta_p_ad)
#~~~~~~~~~~~~~~~~~~~
# Betas
#~~~~~~~~~~~~~~~~~~~
hist(post$beta_p_ad[,1])
hist(post$beta_p_ad[,2], main="pond")
abline(v=0, lty=2, col="red")
#~~~~~~~~~~~~~~~~~~~
# Betas
#~~~~~~~~~~~~~~~~~~~
hist(post$beta_p_ad[,1], main="land")
abline(v=0, lty=2, col="red")
abline(v=0, lty=2, col="red", lwd=2)
hist(post$beta_p_ad[,2], main="pond")
abline(v=0, lty=2, col="red", lwd=2)
mpa <- colMeans(post$phi_ad)
mka <- colMeans(post$kappa_ad)
any((mpa + mka[1:(n.years-1),]) > 1)
added <- mpa + mka[1:(n.years-1),]
any(added > 1)
shit <- c(added)
length(which(shit > 1)) / length(shit)
which(added > 1)
which(added > 1, arr.ind=T)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run PCA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
### PCA
pc.res <- prcomp(all.new[,-c(1)], center=T, scale. = TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set up
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~
# Libraries
#~~~~~~~~~~~~~~~~~~~~~~
library(sf)
library(tidyverse)
#~~~~~~~~~~~~~~~~~~~~~~
# Working directory
#~~~~~~~~~~~~~~~~~~~~~~
#setwd("/Users/madelienelohman/Desktop/geostat_new")
#setwd("/Volumes/BMO/Dissertation/ch1/code/geostat_pinon")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Initial stuff
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pd <- read.csv("data/PlotData.csv")
pd2 <- pd.new[which(pd.new$plot %in% plots.want$plot),]
st_crs(pd2) <- st_crs(4269)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Libraries and set up
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ClustGeo)
library(clusterCrit)
library(colorspace)
library(cowplot)
library(dbscan)
library(geoR)
library(MASS)
library(mvtnorm)
library(raster)
library(rgeoda)
library(sf)
library(spdep)
library(tidyverse)
library(tidyterra)
library(terra)
setwd("/Users/madelienelohman/Documents/GitHub/thesis_simulation")
set.seed(2025)
source("grid_alg.R")
source("voronoi_alg.R")
source("SKATER_alg.R")
source("REDCAP_alg.R")
source("azp_alg.R")
source("ward_alg.R")
### Read in simulated rasters
low.hab <- readRDS("low_hab.rds")
medium.hab <- readRDS("med_hab.rds")
high.hab <- readRDS("high_hab.rds")
n = dim(low.hab)[1]/2
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Grid
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
low.grid <- grid.alg(low.hab, "Low", n)
low.grid$ssb.sst
medium.grid <- grid.alg(medium.hab, "Medium", n)
medium.grid$ssb.sst
high.grid <- grid.alg(high.hab, "High", n)
high.grid$ssb.sst
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Voronoi tesselation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
low.v <- v.alg(low.hab, "Low", n, n)
print(low.v$p)
low.v$ssb.sst
med.v <- v.alg(medium.hab, "Medium", n, n)
print(med.v$p)
med.v$ssb.sst
high.v <- v.alg(high.hab, "High", n, n)
print(high.v$p)
high.v$ssb.sst
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AZP
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
low.azp <- azp.alg(low.hab, "Low", 3, 30, "Calinski_Harabasz")
low.azp$ssb.sst
medium.azp <- azp.alg(medium.hab, "Medium", 3, 30, "Calinski_Harabasz")
medium.azp$ssb.sst
high.azp <- azp.alg(high.hab, "High", 3, 30, "Calinski_Harabasz")
high.azp$ssb.sst
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SKATER
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
low.skater <- skater.alg(low.hab, "Low", 3, 30, "Calinski_Harabasz", n)
low.skater$ssb.sst
medium.skater <- skater.alg(medium.hab, "Medium", 3, 30, "Calinski_Harabasz", n)
medium.skater$ssb.sst
high.skater <- skater.alg(high.hab, "High", 3, 30, "Calinski_Harabasz", n)
high.skater$ssb.sst
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# REDCAP
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
low.red <- redcap.alg(low.hab, "Low", 3, 30, "Calinski_Harabasz", n)
low.red$ssb.sst
low.red$n.clust
medium.red <- redcap.alg(medium.hab, "Medium", 3, 30, "Calinski_Harabasz", n)
medium.red$ssb.sst
high.red <- redcap.alg(high.hab, "High", 3, 30, "Calinski_Harabasz", n)
high.red$ssb.sst
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Save everything
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
save.image("cluster_res.RData")
low.v$clusters
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Libraries and set up
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ClustGeo)
library(clusterCrit)
library(colorspace)
library(cowplot)
library(dbscan)
library(geoR)
library(MASS)
library(mvtnorm)
library(raster)
library(rgeoda)
library(sf)
library(spdep)
library(tidyverse)
library(tidyterra)
library(terra)
setwd("/Users/madelienelohman/Documents/GitHub/thesis_simulation")
set.seed(2025)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Comparing internal scoring
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
crits <- c("S_Dbw", "Calinski_Harabasz", "Davies_Bouldin", "Silhouette")
i=1
hab <- get(paste0(sig.names[i], ".hab"))
int <- data.frame(Algorithm=c("Grid", "Voronoi", "SKATER", "REDCAP", "AZP"),
S_Dbw=NA, Calinski_Harabasz=NA, Davies_Bouldin=NA,
Silhouette=NA)
x <- matrix(values(hab), 50, 50, byrow=T)
hab <- get(paste0(sig.names[i], ".hab"))
sig.names <- c("low", "medium", "high")
hab <- get(paste0(sig.names[i], ".hab"))
int <- data.frame(Algorithm=c("Grid", "Voronoi", "SKATER", "REDCAP", "AZP"),
S_Dbw=NA, Calinski_Harabasz=NA, Davies_Bouldin=NA,
Silhouette=NA)
x <- matrix(values(hab), 50, 50, byrow=T)
intCriteria(x, as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)),
crit=crits)
int[1,2:ncol(int)] <- intCriteria(x, as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)),
crit=crits)
View(int)
as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters))
intCriteria(x, as.vector(t(as.integer(get(paste0(sig.names[i], ".grid"))$clusters))),
crit=crits)
intCriteria(x, as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)),
crit=crits)
x
hab <- get(paste0(sig.names[i], ".hab"))
int <- data.frame(Algorithm=c("Grid", "Voronoi", "SKATER", "REDCAP", "AZP"),
S_Dbw=NA, Calinski_Harabasz=NA, Davies_Bouldin=NA,
Silhouette=NA)
View(int)
x <- matrix(values(hab), 50, 50, byrow=T)
View(x)
as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)
)
get(paste0(sig.names[i], ".v"))$cluster
get(paste0(sig.names[i], ".red"))$clusters
get(paste0(sig.names[i], ".azp"))$clusters
get(paste0(sig.names[i], ".azp"))$clusters
table(get(paste0(sig.names[i], ".azp"))$clusters)
table(as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)))
View(int)
int[1,2:ncol(int)] <- intCriteria(x, as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)),
crit=crits)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Comparing internal scoring
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
crits <- c("Calinski_Harabasz", "Davies_Bouldin", "Silhouette")
int <- data.frame(Algorithm=c("Grid", "Voronoi", "SKATER", "REDCAP", "AZP"),
Calinski_Harabasz=NA, Davies_Bouldin=NA,
Silhouette=NA)
x <- matrix(values(hab), 50, 50, byrow=T)
int[1,2:ncol(int)] <- intCriteria(x, as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)),
crit=crits)
for(i in 1:length(sig.names)){
hab <- get(paste0(sig.names[i], ".hab"))
int <- data.frame(Algorithm=c("Grid", "Voronoi", "SKATER", "REDCAP", "AZP"),
Calinski_Harabasz=NA, Davies_Bouldin=NA,
Silhouette=NA)
x <- matrix(values(hab), 50, 50, byrow=T)
int[1,2:ncol(int)] <- intCriteria(x, as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)),
crit=crits)
int[2,2:ncol(int)] <- intCriteria(x, get(paste0(sig.names[i], ".v"))$cluster,
crit=crits)
int[3,2:ncol(int)] <- intCriteria(x, get(paste0(sig.names[i], ".red"))$clusters,
crit=crits)
int[4,2:ncol(int)] <- intCriteria(x, get(paste0(sig.names[i], ".azp"))$clusters,
crit=crits)
int[which(is.na(as.matrix(int)), arr.ind=T)] <- 1e+15
assign(paste0(sig.names[i], ".int"), int)
}
medium.v <- med.v
for(i in 1:length(sig.names)){
hab <- get(paste0(sig.names[i], ".hab"))
int <- data.frame(Algorithm=c("Grid", "Voronoi", "SKATER", "REDCAP", "AZP"),
Calinski_Harabasz=NA, Davies_Bouldin=NA,
Silhouette=NA)
x <- matrix(values(hab), 50, 50, byrow=T)
int[1,2:ncol(int)] <- intCriteria(x, as.vector(as.integer(get(paste0(sig.names[i], ".grid"))$clusters)),
crit=crits)
int[2,2:ncol(int)] <- intCriteria(x, get(paste0(sig.names[i], ".v"))$cluster,
crit=crits)
int[3,2:ncol(int)] <- intCriteria(x, get(paste0(sig.names[i], ".red"))$clusters,
crit=crits)
int[4,2:ncol(int)] <- intCriteria(x, get(paste0(sig.names[i], ".azp"))$clusters,
crit=crits)
int[which(is.na(as.matrix(int)), arr.ind=T)] <- 1e+15
assign(paste0(sig.names[i], ".int"), int)
}
View(medium.int)
View(low.int)
View(high.int)
